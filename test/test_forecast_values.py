import pytest

from src.app import ForecastValues, get_average_values


@pytest.mark.parametrize(
    "test_input,expected", [
        ([{'average_temperature': 12,
           'date_time': '2024-02-18T00:00:00Z',
           'probability_of_rain': 0.35},
          {'average_temperature': 10,
           'date_time': '2024-02-18T01:00:00Z',
           'probability_of_rain': 0.42},
          {'average_temperature': 9,
           'date_time': '2024-02-18T02:00:00Z',
           'probability_of_rain': 0.7},
          {'average_temperature': 8,
           'date_time': '2024-02-18T03:00:00Z',
           'probability_of_rain': 0.82},
          {'average_temperature': 7,
           'date_time': '2024-02-18T04:00:00Z',
           'probability_of_rain': 0.77},
          {'average_temperature': 7,
           'date_time': '2024-02-18T05:00:00Z',
           'probability_of_rain': 0.48},
          {'average_temperature': 6,
           'date_time': '2024-02-18T06:00:00Z',
           'probability_of_rain': 0.29},
          {'average_temperature': 8,
           'date_time': '2024-02-18T07:00:00Z',
           'probability_of_rain': 0.16},
          {'average_temperature': 9,
           'date_time': '2024-02-18T08:00:00Z',
           'probability_of_rain': 0.1},
          {'average_temperature': 10,
           'date_time': '2024-02-18T09:00:00Z',
           'probability_of_rain': 0.1},
          {'average_temperature': 12,
           'date_time': '2024-02-18T10:00:00Z',
           'probability_of_rain': 0.08},
          {'average_temperature': 14,
           'date_time': '2024-02-18T11:00:00Z',
           'probability_of_rain': 0.11},
          {'average_temperature': 15,
           'date_time': '2024-02-18T12:00:00Z',
           'probability_of_rain': 0.21},
          {'average_temperature': 16,
           'date_time': '2024-02-18T13:00:00Z',
           'probability_of_rain': 0.37},
          {'average_temperature': 16,
           'date_time': '2024-02-18T14:00:00Z',
           'probability_of_rain': 0.7},
          {'average_temperature': 17,
           'date_time': '2024-02-18T15:00:00Z',
           'probability_of_rain': 0.54},
          {'average_temperature': 17,
           'date_time': '2024-02-18T16:00:00Z',
           'probability_of_rain': 0.35},
          {'average_temperature': 16,
           'date_time': '2024-02-18T17:00:00Z',
           'probability_of_rain': 0.25},
          {'average_temperature': 13,
           'date_time': '2024-02-18T18:00:00Z',
           'probability_of_rain': 0.2},
          {'average_temperature': 10,
           'date_time': '2024-02-18T19:00:00Z',
           'probability_of_rain': 0.15},
          {'average_temperature': 10,
           'date_time': '2024-02-18T20:00:00Z',
           'probability_of_rain': 0.05},
          {'average_temperature': 9,
           'date_time': '2024-02-18T21:00:00Z',
           'probability_of_rain': 0.07},
          {'average_temperature': 8,
           'date_time': '2024-02-18T22:00:00Z',
           'probability_of_rain': 0.09},
          {'average_temperature': 8,
           'date_time': '2024-02-18T23:00:00Z',
           'probability_of_rain': 0.11}],

         ForecastValues(
             morning_average_temperature=9.833333333333334,
             morning_chance_of_rain=0.13999999999999999,
             afternoon_average_temperature=16.166666666666668,
             afternoon_chance_of_rain=0.4033333333333333,
             night_average_temperature=10.5,
             night_chance_of_rain=0.1175,
             high_temperature=17,
             low_temperature=6
         )
         ),

    ]
)
def test_forecast_values_average_values(test_input, expected):
    assert get_average_values(test_input) == expected
